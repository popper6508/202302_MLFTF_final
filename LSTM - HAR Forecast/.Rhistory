control = list(fnscale = -1),
method = "L-BFGS-B"
)
negative_entropy <- function(p) {
p_log_p <- p * log(p)
-sum(p_log_p, na.rm = TRUE)
}
# Constraint: P([A=t]) = 0.6
constraint1 <- function(p) {
p[1] - 0.6
}
# Constraint: P([B=t] OR [A=t]) = 0.94
constraint2 <- function(p) {
p[1] + p[3] - 0.94
}
# Constraint: Probabilities sum to 1
constraint3 <- function(p) {
sum(p) - 1
}
# Combine constraints
constraints <- list(
ineqfun = c(constraint1, constraint2, constraint3),
eqfun = NULL
)
# Initial guess for probabilities
initial_prob <- c(0.6, 0.3, 0.1)
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = rbind(c(-1, 0, 0), c(1, 0, -1), c(0, 1, 0)),  # Updated constraint matrix
ci = c(-0.6, 0.94, 1),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Adjust the initial guess for probabilities to satisfy constraints
initial_prob <- c(0.6, 0.3, 0.1)
# Function to enforce constraints
constrained_entropy <- function(p) {
# Constraint: P([A=t]) = 0.6
constraint1 <- p[1] - 0.6
# Constraint: P([B=t] OR [A=t]) = 0.94
constraint2 <- p[1] + p[3] - 0.94
# Constraint: Probabilities sum to 1
constraint3 <- sum(p) - 1
# Objective function: Negative entropy
objective <- -sum(p * log(p))
# Combine objective and constraints
result <- c(objective, constraint1, constraint2, constraint3)
return(result)
}
# Perform constrained optimization
result <- optim(
par = initial_prob,
fn = constrained_entropy,
gr = NULL,
method = "L-BFGS-B",
control = list(fnscale = -1)
)
# Perform constrained optimization
result <- constrOptim(
par = initial_prob,
fn = constrained_entropy,
gr = NULL,
method = "L-BFGS-B",
control = list(fnscale = -1)
)
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = rbind(c(-1, 0, 0), c(1, 0, -1), c(0, 1, 0)),  # Updated constraint matrix
ci = c(-0.6, 0.94, 1),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Adjust the initial guess for probabilities to satisfy constraints
# Define the negative entropy function
negative_entropy <- function(p) {
p_log_p <- p * log(p)
-sum(p_log_p, na.rm = TRUE)
}
# Constraint: P([A=t]) = 0.6
constraint1 <- function(p) {
p[1] - 0.6
}
# Constraint: P([B=t] OR [A=t]) = 0.94
constraint2 <- function(p) {
p[1] + p[3] - 0.94
}
# Constraint: Probabilities sum to 1
constraint3 <- function(p) {
sum(p) - 1
}
# Combine constraints
constraints <- list(
ineqfun = c(constraint1, constraint2, constraint3),
eqfun = NULL
)
# Initial guess for probabilities
initial_prob <- c(0.6, 0.2, 0.2)
# Perform constrained optimization
result <- optim(
par = initial_prob,
fn = negative_entropy,
gr = NULL,
method = "L-BFGS-B",
control = list(fnscale = -1),
constraints = constraints
)
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = NULL,
ci = constraints,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = matrix(unlist(lapply(constraints, function(con) sapply(initial_prob, con))), nrow = length(constraints)),  # Updated constraint matrix
ci = rep(0, length(constraints)),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
unlist(lapply(constraints, function(con) sapply(initial_prob, con))
)
negative_entropy <- function(p) {
p_log_p <- p * log(p)
-sum(p_log_p, na.rm = TRUE)
}
# Constraint: P([A=t]) = 0.6
constraint1 <- function(p) {
p[1] - 0.6
}
# Constraint: P([B=t] OR [A=t]) = 0.94
constraint2 <- function(p) {
p[1] + p[3] - 0.94
}
# Constraint: Probabilities sum to 1
constraint3 <- function(p) {
sum(p) - 1
}
# Combine constraints
constraints <- list(constraint1, constraint2, constraint3)
# Initial guess for probabilities
initial_prob <- c(0.6, 0.2, 0.2)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = ui,
ci = rep(0, length(constraints)),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Initial guess for probabilities
initial_prob <- c(0.5, 0.5, 0.5)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = ui,
ci = rep(0, length(constraints)),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Initial guess for probabilities
initial_prob <- c(0, 0, 0)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = ui,
ci = rep(0, length(constraints)),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Initial guess for probabilities
initial_prob <- c(0.5, 0.5)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
# Perform constrained optimization
result <- constrOptim(
theta = initial_prob,
f = negative_entropy,
grad = NULL,
ui = ui,
ci = rep(0, length(constraints)),  # Updated constraints
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
# Initial guess for probabilities
initial_prob <- c(0.5, 0.5, 0.5)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
constraints
# Initial guess for probabilities
initial_prob <- c(1,1,1)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
# Initial guess for probabilities
initial_prob <- c(1,1,1,1)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
# Initial guess for probabilities
initial_prob <- c(0,0,0)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
# Initial guess for probabilities
initial_prob <- c(0.6,0.2,0.2)
# Construct the constraints matrix
ui <- t(sapply(constraints, function(con) sapply(initial_prob, con)))
ui
# Define the negative entropy function
negative_entropy <- function(p) {
p_log_p <- p * log(p)
-sum(p_log_p, na.rm = TRUE)
}
n <- 4
lower_triangular_matrix <- matrix(1, nrow = n, ncol = n)
lower_triangular_matrix[upper.tri(lower_triangular_matrix)] <- 0
lower_triangular_matrix
# Perform constrained optimization
result <- constrOptim(
theta = 0.5,
f = negative_entropy,
grad = NULL,
ui = lower_triangular_matrix,
ci = c(0.6, 0.94, 1),
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Perform constrained optimization
result <- constrOptim(
theta = c(0.5, 0.5, 0.5),
f = negative_entropy,
grad = NULL,
ui = lower_triangular_matrix,
ci = c(0.6, 0.94, 1),
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Perform constrained optimization
result <- constrOptim(
theta = c(0.6, 0.2, 0.2),
f = negative_entropy,
grad = NULL,
ui = lower_triangular_matrix,
ci = c(0.6, 0.94, 1),
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
matrix <- matrix(0, nrow = 3, ncol = 4)
matrix[row(matrix) >= col(matrix)] <- 1
# Display the matrix
print(matrix)
matrix[4,4] <- 1
matrix[3,4] <- 1
# Display the matrix
print(matrix)
matrix <- matrix(1, nrow = 3, ncol = 4)
matrix[row(matrix) <= col(matrix)] <- 0
matrix[3,4] <- 1
# Display the matrix
print(matrix)
# Create the 3 by 4 matrix
matrix <- matrix(c(1, 1, 0, 0,
1, 1, 1, 0,
1, 1, 1, 1), nrow = 3, byrow = TRUE)
matrix
# Perform constrained optimization
result <- constrOptim(
theta = c(0, 0, 0),
f = negative_entropy,
grad = NULL,
ui = matrix,
ci = c(0.6, 0.94, 1),
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Define the negative entropy function
negative_entropy <- function(p) {
p_log_p <- p * log(p)
-sum(p_log_p, na.rm = TRUE)
}
# Specify the 3x4 matrix
ui <- matrix(c(1, 1, 0, 0,
1, 1, 1, 0,
1, 1, 1, 1), nrow = 3, byrow = TRUE)
# Specify the right-hand side values for the constraints
ci <- c(0.6, 0.94, 1)
# Perform constrained optimization
result <- constrOptim(
theta = c(0, 0, 0),
f = negative_entropy,
grad = NULL,
ui = ui,
ci = ci,
ui.grad = NULL,
ci.grad = NULL,
control = list(fnscale = -1),
method = "L-BFGS-B"
)
# Load the bnlearn package
library(bnlearn)
# Define the nodes (variables) and the edges (dependencies)
nodes <- c("A", "B")
edges <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Create an empty Bayesian network
bn <- empty.graph(nodes)
# Add edges to the Bayesian network
bn <- set.arc(bn, edges)
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_B <- matrix(c(NA, NA, NA, 0.06), ncol = 2, dimnames = list(NULL, c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_B <- array(c(0.06, 0.94, NA, NA), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
cpt_B <- array(c(0.06, 0.94, 0.3, 0.3), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
cpt_B
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_B <- array(c(0.34, 0.3, 0.3, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
cpt_B
cpt_B <- array(c(0.3, 0.34, 0.3, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
cpt_B
cpt_B <- array(c(0.34, 0.3 0.3, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
cpt_B <- array(c(0.34, 0.3, 0.3, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
cpt_B
cpt_B <- array(c(0.3, 0.3, 0.34, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
cpt_B
n
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_B <- array(c(0.3, 0.7, 0.34, 0.06), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
cpt_B
cpt_B <- array(c(0.5, 0.5, 0.85, 0.15), dim = c(2, 2), dimnames = list(B = c("t", "f"), A = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_B))
# Display the Bayesian network
print(bn)
# Query for P(B = "t")
query_result <- cpquery(bn, event = (B == "t"), n = 10000000)
query_result <- cpquery(bn, event = (B == "t"), evidence = list(), n = 1e+07)
# Display the query result
print(query_result)
query_result <- cpquery(bn, event = (B == "t"), evidence = list(A=="t"|A!="t"), n = 1e+07)
query_result <- cpquery(bn, event = (B == "t"), evidence = A=="t"|A!="t", n = 1e+07)
query_result
cpt_A
cpt_B
0.5
cpt_B <- array(c(0.5, 0.5, 0.85, 0.15), dim = c(2, 2), dimnames = list(A = c("t", "f"), B = c("t", "f")))
cpt_B
cpt_AB <- array(c(0.5, 0.85, 0.5, 0.15), dim = c(2, 2), dimnames = list(A = c("t", "f"), B = c("t", "f")))
cpt_AB
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_AB))
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_AB <- array(c(0.5, 0.85, 0.5, 0.15), dim = c(2, 2), dimnames = list(A = c("t", "f"), B = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_AB))
# Create an empty Bayesian network
bn <- empty.graph(nodes)
# Add edges to the Bayesian network
bn <- set.arc(bn, edges)
# Define the nodes (variables) and the edges (dependencies)
nodes <- c("A", "B")
edges <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Create an empty Bayesian network
bn <- empty.graph(nodes)
# Add edges to the Bayesian network
bn <- set.arc(bn, edges)
# Define conditional probability distributions
cpt_A <- matrix(c(0.6, 0.4), ncol = 2, dimnames = list(NULL, c("t", "f")))
cpt_AB <- array(c(0.5, 0.85, 0.5, 0.15), dim = c(2, 2), dimnames = list(A = c("t", "f"), B = c("t", "f")))
# Assign the conditional probability distributions to the nodes
bn <- custom.fit(bn, dist = list(A = cpt_A, B = cpt_AB))
# Display the Bayesian network
print(bn)
query_result <- cpquery(bn, event = (B == "t"), evidence = A=="t" | A!="t", n = 1e+07)
query_result
query_result <- cpquery(bn, event = (B == "t"), evidence = A=="t" | A!="t", n = 1e+05)
query_result
query_result <- cpquery(bn, event = (B == "t"), evidence = TRUE, n = 1e+05)
source("C:/Users/A/OneDrive/바탕 화면/2023-2 Lectures/Statistical Learning and AI/Example721.R", echo=TRUE)
query_result
library(urca)
library(readxl)
library(dplyr)
library(stringr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
### Data Read ###
data <- as.data.frame(read_xlsx("./Data/data_raw_weekly.xlsx")) %>% data.matrix()
data <- data[2:nrow(data), 2:ncol(data)]
data[,1]
log(data[,1])
adf.t=ur.df(log(data[,1]))
adf.t
adf.t@testreg
pp.t=ur.pp(log(data[,1]))
pp.t@testreg
adf.t=ur.df(log(data[,1]))
adf.t@testreg
kpss.t=ur.kpss(test)
kpss.t=ur.kpss(log(data[,1]))
kpss.t@testreg
kpss.t@teststat
kpss.t@res
log(data[,1])
kpss.t@teststat
adf.t=ur.df((data[,1]))
adf.t@testreg
kpss.t=ur.kpss((data[,1]))
kpss.t@teststat
data[,1]
View(data)
library(readxl)
library(readr)
library(recipes)
library(timetk)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
adf.t=ur.df(log(data[2:nrow(data),2]), )
adf.t@testreg
adf.t=ur.df(log(data[2:nrow(data),1]), )
adf.t@testreg
data[2:nrow(data),2]
summary(log(data[2:nrow(data),2]))
summary(log(data[2:nrow(data),1]))
sd(log(data[2:nrow(data),1]))
skewness(log(data[2:nrow(data),1]))
library(moments)
skewness(log(data[2:nrow(data),1]))
kurtosis(log(data[2:nrow(data),1]))
library(urca)
adf.t=ur.df(log(data[2:nrow(data),1]), )
adf.t@testreg
kpss.t=ur.kpss(log(data[2:nrow(data),1]))
kpss.t@teststat
data <- as.data.frame(read_xlsx("./Data/data_raw_weekly.xlsx")) %>% data.matrix()
data <- data[2:nrow(data), 2:ncol(data)]
plot(log(data[,2]), type = 'l', xlab = "time", ylab = "Index")
title("lnVKOSPI")
library(moments)
summary(log(data[,1]))
sd(log(data[,1]))
skewness(log(data[,1]))
kurtosis(log(data[,1]))
library(urca)
adf.t=ur.df(log(data[2:nrow(data),1]), )
adf.t@testreg
kpss.t=ur.kpss(log(data[,1]))
kpss.t@teststat
pp.t=ur.pp(log(data[,1]))
pp.t@testreg
